import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from datetime import datetime, timedelta
from config import TOKEN

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–æ—É—Ç–µ—Ä
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è "–ü—Ä–∏–≤–∞—Ç–∫–∞ (–ù–ê–í–°–ï–ì–î–ê)"
action_button = InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–∫–∞(–ù–ê–í–°–ï–ì–î–ê)üí•", callback_data="action")
action_keyboard = InlineKeyboardMarkup(inline_keyboard=[[action_button]])

accepting_requests = True

@router.message(Command(commands=['start']))
async def start_handler(message: Message):
    await message.answer("üíú –ü—Ä–∏–≤–∞—Ç–∫–∞ Premium ‚ù§Ô∏è\n\t\tüëª–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüëª")
    photo = FSInputFile("image.jpg")  # –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer_photo(photo, caption=(
        "‚ÜòÔ∏è ‚ùóÔ∏è–ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞‚ùóÔ∏è ‚ÜôÔ∏è\n\n"
        "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–∫–∏ üî•\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å üîí\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–π –±–æ—Ç –Ω–∞ —Å–ª—É—á–∞–π –±–∞–Ω–∞ –ø—Ä–∏–≤–∞—Ç–∫–∏ ‚ôªÔ∏è\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—å–µ:\n"
        "https://telegra.ph/VHOD-V-VIP-ARHIV-10-31"
    ))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)

@router.callback_query(lambda query: query.data == "action")
async def action_handler(query: types.CallbackQuery):
    await query.answer()
    new_text = (
        "–¢–∞—Ä–∏—Ñ: –ü—Ä–∏–≤–∞—Ç–∫–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞)\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 1600.00 RUB\n"
        "–î–æ—Å—Ç—É–ø –∫:\n"
        "‚Ä¢ üòà –ü—Ä–∏–≤–∞—Ç–∫–∞ Premium üëë\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ:\n"
        "üóÇ 25TB –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã\n"
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª–∏—Ç—ã—Ö –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π\n\n"
    )
    await query.message.edit_text(new_text, reply_markup=None)

    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_action")
    back_button = InlineKeyboardButton(text="üëà–Ω–∞–∑–∞–¥", callback_data="back_to_actions")
    await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup([[pay_button], [back_button]]))

@router.callback_query(lambda query: query.data == "pay_action")
async def pay_action_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.edit_text(
        "‚úÖ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n\n"
        "üí≥ –ö–∞—Ä—Ç–∞: 2202205347906148\n"
        "–ö–æ–≤–∞–ª–µ–≤ –î–∞–Ω–∏–∏–ª –ê—Ä—Ç–µ–º–æ–≤–∏—á (–°–±–µ—Ä)\n"
        "–°—É–º–º–∞: 1600.00 RUB"
    )
    paid_button = InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_done")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
    await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup([[paid_button], [cancel_button]]))

@router.callback_query(lambda query: query.data == "payment_done")
async def payment_done_handler(query: types.CallbackQuery):
    await query.answer()
    user_id = query.from_user.id
    end_date_str = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")

    with open("subscriptions.txt", "a") as file:
        file.write(f"{query.from_user.username}:{end_date_str}\n")

    await bot.send_message(
        chat_id=-1002498160000, 
        text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\nID: {user_id}\nUsername: @{query.from_user.username}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_access:{user_id}")]])
    )
    await query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")

@router.callback_query(lambda query: query.data.startswith("approve_access:"))
async def approve_access_handler(query: types.CallbackQuery):
    await query.answer()
    user_id = int(query.data.split(":")[1])
    await bot.send_message(chat_id=user_id, text="üéâ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω! –°—Å—ã–ª–∫–∞: https://t.me/+CoJCYExq11M4ZTUy")
    await query.message.answer("–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@router.callback_query(lambda query: query.data == "back_to_actions")
async def back_to_actions_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)

async def remove_expired_users():
    group_id = -1002498160000
    current_date = datetime.today().date()
    with open("subscriptions.txt", "r") as file:
        subscriptions = [line.strip().split(":") for line in file]

    with open("subscriptions.txt", "w") as file:
        for username, expiration_date_str in subscriptions:
            expiration_date = datetime.strptime(expiration_date_str, "%Y-%m-%d").date()
            if expiration_date < current_date:
                try:
                    await bot.kick_chat_member(group_id, username)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å @{username}: {e}")
            else:
                file.write(f"{username}:{expiration_date_str}\n")
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î–µ–π—Å—Ç–≤–∏—è 2"
# @router.callback_query(lambda query: query.data == "action2")
# async def action2_handler(query: types.CallbackQuery):
#     await query.answer()
#     new_text = (
#         "–¢–∞—Ä–∏—Ñ: –ê—Ä—Ö–∏–≤ —Å—Å—É—á–µ–∫ (–ù–ê–í–°–ï–ì–î–ê)\n"
#         "–°—Ç–æ–∏–º–æ—Å—Ç—å: 999.00 üá∑üá∫RUB\n"
#         "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
#         "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n"
#         "‚Ä¢ üòà–°–ª–∏—Ç—ã–µ —Å—Å—É—á–∫–∏ Premiumüëë (–∫–∞–Ω–∞–ª)\n\n"
#         "üëá–ü–†–ò –ü–û–ö–£–ü–ö–ï –í–´ –ü–û–õ–£–ß–ê–ï–¢–ïüëá\n\n"
#         "üóÇ –ë–æ–ª–µ–µ 25TB –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã\n"
#         "üëâ [ –§–æ—Ç–æ | –í–∏–¥–µ–æ ]\n\n"
#         "üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—Ç—ã—Ö –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π\n"
#         "üëâ [ –í–ö | –ò–Ω—Å—Ç–∞–≥—Ä–∞–º | –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ]\n\n"
#         "üôÖ‚Äç‚ôÇÔ∏è –í–µ—Å—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±—ã–≤—à–∏—Ö –ø–∞—Ä–Ω–µ–π —ç—Ç–∏—Ö –¥–µ–≤—É—à–µ–∫"
#     )
#     await query.message.edit_text(new_text, reply_markup=None)

#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –∏ "üëà–Ω–∞–∑–∞–¥"
#     pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_action2")
#     back_button = InlineKeyboardButton(text="üëà–Ω–∞–∑–∞–¥", callback_data="back_to_actions")
#     back_keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[[pay_button], [back_button]]
#     )
#     await query.message.edit_reply_markup(reply_markup=back_keyboard)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–æ–ø–ª–∞—Ç–∏—Ç—å" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
# @router.callback_query(lambda query: query.data == "pay_action2")
# async def pay_action2_handler(query: types.CallbackQuery):
#     await query.answer()
#     payment_text = "‚úÖ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ. –ü–ª–∞—Ç–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ —Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞"
#     await query.message.edit_text(payment_text)

#     pay_button = InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment2")
#     cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
#     payment_keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[[pay_button], [cancel_button]]
#     )
#     await query.message.edit_reply_markup(reply_markup=payment_keyboard)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
# @router.callback_query(lambda query: query.data == "go_to_payment2")
# async def go_to_payment2_handler(query: types.CallbackQuery):
#     await query.answer()
#     card_number = "üí≥ –í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: 2202205347906148\n\n–ö–æ–≤–∞–ª–µ–≤ –î–∞–Ω–∏–∏–ª –ê—Ä—Ç–µ–º–æ–≤–∏—á(—Å–±–µ—Ä)\n\n999.00 —Ä—É–±–ª–µ–π\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª', –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø."

#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏–ª" –∏ "–û—Ç–º–µ–Ω–∞"
#     paid_button = InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_done2")
#     cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
#     payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[[paid_button], [cancel_button]])

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     await query.message.edit_text(card_number, reply_markup=payment_keyboard)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
# @router.callback_query(lambda query: query.data == "payment_done2")
# async def payment_done2_handler(query: types.CallbackQuery):
#     await query.answer()

#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     user_id = query.from_user.id
#     username = query.from_user.username
#     first_name = query.from_user.first_name
#     last_name = query.from_user.last_name

#     # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
#     end_date_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"

#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Ñ–∞–π–ª
#     with open("subscriptions.txt", "a") as file:
#         file.write(f"{username}:{end_date_str}\n")

#     message_to_send = (
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–ø–ª–∞—Ç—É:\n"
#         f"ID: {user_id}\n"
#         f"–ò–º—è: {first_name} {last_name}\n"
#         f"Username: @{username}"
#     )
#     approve_button = InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_access:{user_id}")
#     try:
#         await bot.send_message(chat_id=-1002498160000, text=message_to_send, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[approve_button]]))
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

#     await query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
                    
if __name__ == '__main__':
    print("–±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    tasks = [
        loop.create_task(dp.start_polling(bot)),
        # loop.create_task(auto_accept_requests()),
        # loop.create_task(monitor_terminal())
    ]

    loop.run_until_complete(asyncio.wait(tasks))




