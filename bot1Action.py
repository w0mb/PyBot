import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from –ë–æ—Ç–û–ø–ª–∞—Ç.config import TOKEN
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
action_button = InlineKeyboardButton(text="–ê—Ä—Ö–∏–≤ —Å—Å—É—á–µ–∫ (499.00 üá∑üá∫RUB)", callback_data="action")
action_keyboard = InlineKeyboardMarkup(inline_keyboard=[[action_button]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=['start']))
async def start_handler(message: Message):
    await message.answer("üíú –°–ª–∏—Ç—ã–µ —Å—Å—É—á–∫–∏ Premium ‚ù§Ô∏è\n\t\tüëª–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüëª")
    image_path = "image.jpg"  # –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = FSInputFile(image_path)
    caption = (
        "‚ÜòÔ∏è ‚ùóÔ∏è–ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞‚ùóÔ∏è ‚ÜôÔ∏è\n\n"
        "‚Ä¢ —Ç–æ–ª—å–∫–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç üî•\n"
        "‚Ä¢ –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å üîí\n"
        "‚Ä¢ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ ‚ôªÔ∏è\n\n"
        "–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤ —Å—Ç–∞—Ç—å–µüëá\n"
        "https://telegra.ph/Privatnyj-kanal-09-11"
    )
    await message.answer_photo(photo, caption=caption)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è (—Ç–∞—Ä–∏—Ñ)
@router.callback_query(lambda query: query.data == "action")
async def action_handler(query: types.CallbackQuery):
    await query.answer()
    new_text = (
        "–¢–∞—Ä–∏—Ñ: –ê—Ä—Ö–∏–≤ —Å—Å—É—á–µ–∫\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 499.00 üá∑üá∫RUB\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n\n"
        "‚Ä¢ üòà–°–ª–∏—Ç—ã–µ —Å—Å—É—á–∫–∏ Premiumüëë (–∫–∞–Ω–∞–ª)\n\n"
        "üëá–ü–†–ò –ü–û–ö–£–ü–ö–ï –í–´ –ü–û–õ–£–ß–ê–ï–¢–ïüëá\n\n"
        "üóÇ –ë–æ–ª–µ–µ 25TB –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã\n"
        "üëâ [ –§–æ—Ç–æ | –í–∏–¥–µ–æ ]\n\n"
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—Ç—ã—Ö –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π\n"
        "üëâ [ –í–ö | –ò–Ω—Å—Ç–∞–≥—Ä–∞–º | –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ]\n\n"
        "üôÖ‚Äç‚ôÇÔ∏è –í–µ—Å—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±—ã–≤—à–∏—Ö –ø–∞—Ä–Ω–µ–π —ç—Ç–∏—Ö –¥–µ–≤—É—à–µ–∫"
    )
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_action")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[[pay_button], [cancel_button]])
    await query.message.edit_text(new_text, reply_markup=payment_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
@router.callback_query(lambda query: query.data == "pay_action")
async def pay_action_handler(query: types.CallbackQuery):
    await query.answer()
    payment_text = "‚úÖ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ."
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–ø–ª–∞—Ç–∏–ª" –∏ "–û—Ç–º–µ–Ω–∞"
    paid_button = InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_done")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    await query.message.edit_text(payment_text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[paid_button], [cancel_button]]
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª"
@router.callback_query(lambda query: query.data == "payment_done")
async def payment_done_handler(query: types.CallbackQuery):
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = query.from_user.id
    username = query.from_user.username
    first_name = query.from_user.first_name
    last_name = query.from_user.last_name

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
    end_date = datetime.now() + timedelta(days=30)
    end_date_str = end_date.strftime("%Y-%m-%d")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Ñ–∞–π–ª
    with open("subscriptions.txt", "a") as file:
        file.write(f"{username}:{end_date_str}\n")

    message_to_send = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–ø–ª–∞—Ç—É:\n"
        f"ID: {user_id}\n"
        f"–ò–º—è: {first_name} {last_name}\n"
        f"Username: @{username}"
    )
    approve_button = InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_access:{user_id}")
    try:
        await bot.send_message(chat_id=-1002460014339, text=message_to_send, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[approve_button]]))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "—Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø"
@router.callback_query(lambda query: query.data.startswith("approve_access:"))
async def approve_access_handler(query: types.CallbackQuery):
    await query.answer()
    user_id = int(query.data.split(":")[1])
    access_link = "https://t.me/slituesuchu"
    try:
        await bot.send_message(chat_id=user_id, text=f"üéâ –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–ª—É—á–µ–Ω! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {access_link}")
        await query.message.answer("–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" ‚Äî –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
@router.callback_query(lambda query: query.data == "cancel")
async def cancel_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)

if __name__ == '__main__':
    print("–±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª")
    asyncio.run(dp.start_polling(bot))
